
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title> Discussion JS Decisions Chapter 3 ITSE 1411--Beginning Web Programming</title>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
<link href="http://www.austincc.edu/jscholl/css/relassignmentStyles.css" rel="stylesheet" type="text/css" media="screen" />
<style type="text/css">
ol.roman{list-style-type:upper-roman;}
ol.lalpha{list-style-type:lower-alpha;}
ol.lroman{list-style-type:lower-roman;}
</style>
</head>

 <body>
 <div id="leftHeading">
       ITSE 1411 Beginning Web <br />
      JS Decision Module 3 Discussion
 </div>
  
 <div id="rightHeading">
    <script src="http://www.austincc.edu/jscholl/lastUpdated.js" type="text/javascript"></script>
 </div>
 
<div id="barImage">
    <img src="http://www.austincc.edu/jscholl/indexImages/rulerslice.gif" alt="" />
</div>   
<div class="clearfloats"></div>
<div id="pageContent">

<div class="clearfloats"></div>
<div class="leftColumn">Discussion</div>
<div class="clearfloats"></div>

<div class="rightColumn"> 
  <ol>
     <li>JavaScript Decisions
      <ol class="lalpha">
      <li>The "if" statements
         <ul>
            <li>The "if" statement is a conditional statement that evaluates a condition to determine "if" the condition is true.</li>
            <li>When the condition is true the statement (or block of statements contained in curly braces) is executed.</li>
            <li>The syntax for the "if" statement is:<br />
                 if (conditional expression)<br />
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statement;<br />
                 or<br /><br />
                 if (conditional expression)<br />
                 {<br />
                   &nbsp;&nbsp;0 or more statements<br />
                 }</li>
            <li>Parts of the "if" statement
               <ol>
                  <li>The keyword "if"</li>
                  <li>The conditional statement enclosed in parenthesis.  There is no semicolon after the conditional statement.</li>
                  <li>The command block that is executed when the conditional statement is true.<br />
                      The command block can be 0 to many statements.  When there is only 1 statement,
                      the statement can stand-alone.  In all other cases, the block must be contained in
                      curly braces.</li>
                  <li>When the command block is complete, control goes to the next statement following the command block.</li>
                  <li>When the conditional statement evaluates to false, the command block is skipped and control goes to the
                      next statement following the control block.</li>
               </ol></li>
         </ul></li>
            <li>The "if...else" statement
                <ul>    
                  <li>The "if...else" statement begins the same as the "if" statement.  It is a conditional statement that evaluates a condition to
                      determine "if" the condition is true.</li>
                  <li>When the condition is true, the statement (or block of statements contained in curly braces) is executed.</li>
                  <li>When the condition is false, the statement (or block of statements contained in curly braces) below the keyword else is executed.</li>
                  <li>Parts of the "if...else" statement
                        <ol>
                              <li>Starts the same as the "if" statement with the keyword "if"</li>
                              <li>The conditional statement enclosed in parenthesis</li>
                              <li>The command block with the exact same restrictions as the "if" statement.</li>
                              <li>The 4th and 5th parts differ from the "if" statement.  The 4th part is the keyword "else".</li>
                              <li>A command block follows the "else" keyword with the same restrictions as the command block for the "if". </li>
                              <li>When the conditional statement evaluates to true, the command block following the conditional statement is executed.
                                  When the conditional statement evaluates to false, the command block following the keyword "else" is executed.</li>
                              <li>After the appropriate command block is executed, control goes to the next statement following the command block after
                                  the "else" keyword.</li>
                        </ol></li>
                </ul></li>  
      <li>The window.confirm() method as a conditional expression
         <ul>
            <li>The window.confirm() method is like the "if...else"  statement except that the user answer "true" or "false" in a dialog box.</li>
            <li>The syntax for the window.confirm() method is:<br />
                  window.confirm(message);<br />
                 The message can be either a literal string or a variable.</li>
            <li>When the user clicks the "OK" button, a true value is returned.</li>
            <li>When the user clicks the "Cancel" button, a false value is returned.</li>
            <li>When nothing is to occur when the "Cancel" button is clicked, the window.confirm() is treated like the "if" statement.</li>
         </ul>         
      </li>
      <li>Nested "if" and "if...else" statements
         <ul>
            <li>Sometimes the response to a conditional statement requires an additional condition to be tested.  This is called nested "if"
                or nested "if...else" statements.</li>
         </ul></li>
      <li>"switch" statements
         <ul>
            <li>The switch statement compares the value of an expression to another value.</li>
            <li>The switch statement uses the keywords switch and case.</li>
            <li>The syntax of the switch statement is<br />
                switch (expression)<br />
                {<br />
                &nbsp;&nbsp;&nbsp;case label: statement(s);<br />
                &nbsp;&nbsp;&nbsp;case label: statement(s);<br />
                ...<br />
                default: statement(s);<br />
                }</li>
            <li>Different computer languages have different rules for the switch statement.  If you know a different computer language
                be careful when coding in JavaScript due to the differences.</li>
            <li>In JavaScript, the "label" is a specific value that can be literal values (string, numeric, or float), or a variable
                that can be of type string, numeric, or float.</li>
            <li>When the value of an expression matches the "label" in the "case label", all statements following the matched value are executed until
                either the end of the switch statement is reached or a break; statement is executed.</li>
            <li>When no "label" matches the value of the expression, the default is to match with the "default" label.  When there is no "default" label
                and no label matches, no statements are executed within the switch statement.</li>
            <li>The comparison is completed top to bottom until a "label" matches.  The "default" label when used must be the last "label" coded within
                the switch statement.</li>
         </ul></li>
      </ol> </li><!-- closes list of decisions  -->
  </ol>  <!-- closes JavaScript decisions  -->
</div>
<div class="clearfloats"></div>


</div>
</body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title> Assignment JS Module 3 ITSE 1411--Beginning Web Programming</title>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
<link href="http://www.austincc.edu/jscholl/css/relassignmentStyles.css" rel="stylesheet" type="text/css" media="screen" />
</head>

 <body>
 <div id="leftHeading">
       ITSE 1411 Beginning Web <br />
       JS Module 3 Assignment
 </div>
  
 <div id="rightHeading">
    <script src="http://www.austincc.edu/jscholl/lastUpdated.js" type="text/javascript"></script>
 </div>
 
<div id="barImage">
    <img src="http://www.austincc.edu/jscholl/indexImages/rulerslice.gif" alt="" />
</div>   
<div class="clearfloats"></div>
<div id="pageContent">

<div class="clearfloats"></div>
<div class="leftColumn">Assignment</div>
<div class="clearfloats"></div>

<div class="rightColumn">
      <ol>
          <li>oilPages page:
            <ul>
                  <li>Open your templateHTML5.htm page and save as oilPages.htm in your module3 folder.</li>
                  <li>You are to use page 186, exercise 3-8, step 3, and create the script section but place in the body and
                      not the head of your oilPages.htm.</li>
                  <li>Test your page.</li>
            </ul></li>
         <li>prompt method:
            <ul>
                <li>See <a href="http://www.w3schools.com/js/tryit.asp?filename=tryjs_prompt">W3C prompt example</a></li>
                <li>Work with the example and ask the user to enter the price of an oil barrel</li>
                <li>Change the var oilPrice = 52.86; to be var oilPrice;</li>
                <li>Place the prompt after the var oilPrice; instruction.</li>
                <li>Test your page by running your page with input of 50, 55, and 60.</li>
            </ul></li>
           <li>Portfolio page using prompt, if...else, and alert statements
             <ul>
                <li>Add an order.htm page, or add an order to another page of your project in your portfolio where it fits.</li>
                <li>You can ask the user to order something.  It can be a manual, a t-shirt, a ball cap; anything
                   that makes sense that could support your site.</li>
                <li>This order will loosely follow Project 3-1 on page 187.</li>
                <li>You will ask for some type of order and then calculate shipping and handling.</li>
                <li>You will not use a text box for input, but a prompt.  (We haven't covered text boxes yet.)</li>
                <li>This will require a use of "if...else" to determine the shipping and handling.</li>
                <li>Use an alert box to display the total cost with shipping and handling.</li>
                <li>Warning: All text is entered as a string. In order to use the value as a number you must parse the number.<br />
                    purchasePrice = parseInt(purchasePrice);<br />
                    will convert a text purchasePrice to an integer purchasePrice.<br />
                    purchasePrice = parseFloat(purchasePrice);<br />
                    will convert a text purchasePrice to a float (number with a decimal point) purchasePrice.</li>               
            </ul></li> 
            <li>Practice page using while and nested if, if...else statements
              <ul>
                  <li>Click on <a href="http://austincc.edu/jscholl/1411/numbersExample.htm">numberExamples.htm</a> page.</li>
                  <li>View source and study the code.</li>
                  <li>This is an example of looping through 100 times and depending on the value of the number, deciding what
                      to display.</li>
                  <li>The example is written as a while loop.  You are to rewrite the code with the following changes:
                      <ul>
                        <li>Write the numbers from 1 to 90</li>
                        <li>Use a for loop</li>
                        <li>When the number is divisible by 3 write "Fizz"</li>
                        <li>When the number is divisible by 5 write "Buzz"</li>
                        <li>When the number is divisible by both 3 and 5, write "FizzBuzz"</li>
                        <li>After you write "FizzBuzz", display a line break.</li>
                        <li>Name your page FizzBuzz.htm and save in your module3 folder.</li>
                      </ul></li>
              </ul></li>
            <li>Referencing JavaScript Objects: <span style="font-style:italic">You will be changing the same code seven different times.  I had you rename the
                pages so that if you made an error, you wouldn't have to start completely over.  However, I am only looking at the
                last page GosselinMotors/index8.htm page.  So, if you accidentally forget to change the name and save over a page, you
                do not have to go back and redo the pages as long as you have GosselinMotors/index8.htm correct.</span>
              <ul>
                  <li>Gosselin Motors home page toggling images between The A Class is Here and Come and Enjoy the Brand New Car
                    <ul>
                      <li>Click on <a href="http://austincc.edu/jscholl/1411/GosselinMotors.zip">GosselinMotors.zip</a>.  Unzip and store in a folder named
                          GosselinMotors in your module3 folder.  (If you downloaded from the editor's site, 
                          your images folder has an image with an uppercase extension GIF.  That needs to be gif.  I
                          corrected this error in my zipped file.)</li>              
                      <li>Open index.html and save as index1.htm (Notice you use of the number 1 in the name
                          and the omission of l in extension.) 
                          in the module3/GosselinMotors folder.</li>  
                      <li>Add the validation image icons from your template above the close body tag.</li>
                     <li>Add the coding from page 194 of your JavaScript text.</li>     
                     <li>You should be able to click the images and have them change once you view the
                         page in a browser. </li>   
                     <li>Save the document.</li> 
                    </ul></li>
                  <li>Using the this reference
                    <ul>
                       <li>index2 page
                         <ul>
                           <li>If necessary, open index1.htm from your module3 folder in your editor
                               and save as index2.htm.</li>
                           <li>Add the coding from pages 195 - 196 of your JavaScript text.</li>
                           <li>Test to be sure that your page still operates the same.</li>
                           <li>Save the document.</li>
                         </ul></li>
                    </ul></li>   
                  <li>Add defaultStatus and status properties (this section is not required since some browsers do not allow the status change)
                    <ul>
                      <li>index3 page
                        <ul>
                          <li>If necessary, open your index2.htm page in your editor and save as index3.htm.</li>
                          <li>Add the coding from pages 202 - 203 of your JavaScript text.</li>
                          <li>Open in your browser and look in your status bar (along the bottom of the screen) when you
                              move  your mouse over the first property.</li>
                          <li>Save the document.</li>
                       </ul></li>                
                    </ul></li>               
                  <li>The mouse mousedown and mouseup Events
                    <ul>
                      <li>index4 page
                        <ul>
                          <li>If necessary, open your index3.htm (or index2.htm if you skipped adding the 
                              defaultStatus properties) page in your editor and save as index4.thm.</li>
                          <li>Add the coding from pages 205 - 206 and then step 2 on page 207 of the text.  
                              Warning:  this will not validate, but you will change it later.</li>
                          <li>Save the document.</li>
                        </ul></li>                
                    </ul></li>    
                  <li>Use the open window method
                    <ul>
                      <li>index5 page
                        <ul>
                           <li>If necessary, open your index4.htm page in your editor and save as index5.htm.</li>
                           <li>Add the coding from pages 212 - 213 of the text.  Your page should now validate.</li>
                           <li>Save the document.</li>
                        </ul></li>                
                    </ul></li>  
                  <li>The focus method 
                    <ul>
                      <li>index6 page
                        <ul>
                           <li>If necessary, open your index5.htm page in your editor and save as index6.htm.</li>
                           <li>Add the coding from page 215 of the text.</li>
                           <li>Save the document.</li>
                        </ul></li>                
                    </ul></li>   
                  <li>The close method
                    <ul>
                       <li>Car pages
                          <ul>
                             <li>Follow the instructions on page 216 to add the close method to the different car pages with
                                 the following change.  The onclick should have ="self.close();return false;"<br />
                                 According to the W3C the "return false;" at the end of the event handling function tells the browser 
                                 not to navigate to the URI. Without it, the page would refresh after the script ran.</li>
                             <li>Save the documents.</li>
                          </ul></li>                
                    </ul></li>
                  <li>index7 page
                     <ul>
                        <li>If necessary, open your index6.htm page in your editor and save as index7.htm.</li>
                        <li>Follow the instructions on pages 219 - 220 of the text.</li>
                        <li>Save the document.</li>
                     </ul></li>                           
                  <li>index8 page
                     <ul>
                        <li>If necessary, open your index7.htm page in your editor and save as index8.htm.</li>
                        <li>Follow the instructions on page 227 of the text.</li>
                        <li>Save the document.</li>
                     </ul></li>
              </ul></li>
            <li>Update index page with links
               <ul>
                  <li>Open your index.htm page in Komodo Edit.</li>
                  <li>Update your index.htm page to link to your pages in your module3 folder. (For Gosselin Motors, you
                      do not need to link to index1 - index7.)</li>
                  <li>Link to your FizzBuzz.htm page.</li>
                  <li>Upload your index.htm page and your module3 folder.  (Be sure that you update all images and pages associated with the Gosselin Motors
                      site.)</li>
                  <li>Be sure to test for validation.</li>
                  <li>Email jscholl@austincc.edu for grading.</li>
             </ul></li>
      </ol>

</div>
<div class="clearfloats"></div>


</div>
</body>
</html>
